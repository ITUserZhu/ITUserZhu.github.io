[{"title":"测试笔记","date":"2017-03-20T06:18:06.000Z","path":"2017/03/20/first-paper/","text":"笔记node 笔记第一天 Node 是一个可以解析和执行js的一个运行时(运行环境) Node 不同于浏览器,不再关心GUI图形界面,专注于数据处理 文件中的数据 网络中的数据 数据库中的数据 网络服务 Node 特点: Event drivern 事件驱动 非阻塞IO模型(异步编程模型) 单线程 跨平台 轻量高效 path 环境变量 将可执行文件所属绝对路径以’英文分号’作为分隔符添加到path环境变量中 在环境变量中田间一个变量名(大写程序名_HOME),变量值为可执行文件所属绝对路径 然后在Path环境中以英文分号作为分割使用 %变量名% 来对你的变量进行引用 这种方式好处就是方便维护 Node 中的JavaScript Ecmascript if /else / var / function… Date / Math … Console setTimeout clearTimeout setInterval claerInterval Node内置核心模块 作用: 每一个核心模块都专注于处理某个功能.如fs模块专注于文件操作 使用方式: 所有的核心模块都提供了一系列的API共你调用.第一步必须先调用 require 例如 var fs = require(fs) 文件操作 读取文件 readFile 写入文件 writeFile 监视文件 watchFile 读取目录 readdir 读取的是文件名和目录名称 http 搭建一个能响应 hello world 的服务 搭建一个根据不同URL响应不同的内容(写死的字符串) 搭建一个能根据不同URL响应不同文件 node 第二天在Node 中使用模版引擎 模版引擎与DOM对象没有关系 http-server 它是基于Node 开发的一个全局命令行工具,可以快速托管你的静态资源 第一步: 安装 npm i -g http-server npm install --global http-server 第二步: 基本使用 卸载 http-server npm unistall --global http-server 模块化 在Node 中,为每一个文件都提供了一个require 函数 没一个文件模块都是一个单独的私有作用域 如果想要在一个模块中向外导出一些被别人访问的成员: 通过:module.exports向外导出,没一个模块都有一个对象: module.exports,默认是一个空对象 require 函数的作用:用来加载文件模块 * 内置模块: 例如 fs / http * 第三方: art-template / marked... require 函数的第一个作用 * 执行被加载模块中的代码 * 得到被加载模块中导出的接口对象 node 第三天 异步编程思维 清楚理解异步代码的执行过程 能做到封装一个函数（内部由异步操作产生该函数的结果） 所有的异步操作都在普通操作完成之后才会执行 所有函数中通过异步操作得到的结果一定是通过callback回调函数来获取 上层定义 下层调用 模块天生就是一个私有作用域,外部拿不到 对于同一个模块,被多次加载,会被缓存起来,以后再加载就直接读取缓存结果 加载过的模块的导出接口会被放到缓存中 模块的加载执行顺序,取决于require函数出现的位置 npm常用命令 npm–help 查看 npm 工具使用帮助 npm–version 查看版本 npm –global npm 升级版本 npm 需要查看的工具 -h 查看工具的使用帮助 npm uninstall [–save] 卸载当前项目中某个包 安装全局命令行工具 在node 中,还有一种包比较特殊,这种包被称为全局命令行工具,这种不是用在项目中辅助调用的,而是提供一个工具供你在终端使用 `npm install --global http-server` nrm 多镜像缘切换 安装 npm install –global nrm 自动同步修改代码重启服务器 nodemon第一:安装 npm i -g nodemon 第二: 使用 node app.js 通过 nodemon app.js node 第四天res.writeHead(200,{ ‘Content-Type’: ‘text/html; charset=utf-8’}) 文件操作路径 在文件操作中,绝对路径无非就是两种形式: c:/a/b/a.txt 绝对路径 a/b/a.txt 相对路径 相对路径 ./data/a.txt 这里的相对路径表示在哪里执行Node命令,相对路径就相对于谁 filenmae 和 dirname __filenmae永远获取到的都是当前文件的绝对路径 __dirname永远获取到的都是当前文件所属目录的绝对路径 __dirname + &#39;\\\\data.txt&#39; 在windows上 ,路径分隔是反斜杠:\\ 可以利用path.sep属性获取当前操作系统的路径分隔符 path.join(__dirname,’../a.txt’) 将多个字符串拼接完整的路径 ‘../‘代表进入上一级 path.basename 获取有后缀名的文件 path.dirname 获取第一个路径的目录部分 path.normalize(path) 将一个非标准路径转换成标准路径 path.resolve([…path]) 将一个路径转为动态的绝对路径,但是转出来的绝对路径还是相对于Node执行命令的终端位置 path.parse(‘c:\\paht\\file.txt’) 路径转为对象 对应path.format({}) 在node操作路径的时候,可以使用正斜杠作为路径操作符,因为Node在真正处理文件资源的时候,会自动转换 web路径永远相对于当前页面的url路径 , url只是个标识, 关键在于html页面中的资源引用路径到底相对于什么在 web 中,一切页面中的资源请求路径都相对于当前使用这个页面的 link href img src script src iframe href a href post 请求 node中获取数据 querystring.parse(data) 把查询字符串转换成对象 参数传入: data = ‘name=aa&amp;age=18’ 将表单的enctype 设置为multipart/form-data awesome-名字 git搜索常用的插件"}]