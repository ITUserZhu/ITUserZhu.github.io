[{"title":"node学习","date":"2016-05-10T09:12:26.000Z","path":"2016/05/10/Node/","text":"Node 是一个可以解析和执行js的一个运行时(运行环境)Node 不同于浏览器,不再关心GUI图形界面,专注于数据处理 文件中的数据 网络中的数据 数据库中的数据 网络服务 Node 特点: Event drivern 事件驱动 非阻塞IO模型(异步编程模型) 单线程 跨平台 轻量高效 path 环境变量 将可执行文件所属绝对路径以’英文分号’作为分隔符添加到path环境变量中 在环境变量中田间一个变量名(大写程序名_HOME),变量值为可执行文件所属绝对路径 然后在Path环境中以英文分号作为分割使用 %变量名% 来对你的变量进行引用 这种方式好处就是方便维护 Node 中的JavaScript 123456Ecmascript if /else / var / function... Date / Math ...ConsolesetTimeout clearTimeoutsetInterval claerInterval Node内置核心模块 作用: 每一个核心模块都专注于处理某个功能.如fs模块专注于文件操作 使用方式: 所有的核心模块都提供了一系列的API共你调用.第一步必须先调用 require 例如 var fs = require(fs) 文件操作 读取文件 readFile 写入文件 writeFile 监视文件 watchFile 读取目录 readdir 读取的是文件名和目录名称 http 搭建一个能响应 hello world 的服务 搭建一个根据不同URL响应不同的内容(写死的字符串) 搭建一个能根据不同URL响应不同文件 在Node 中使用模版引擎 模版引擎与DOM对象没有关系 http-server它是基于Node 开发的一个全局命令行工具,可以快速托管你的静态资源 第一步: 安装 12npm i -g http-servernpm install --global http-server 卸载 http-server1npm unistall --global http-server 模块化 在Node 中,为每一个文件都提供了一个require 函数 没一个文件模块都是一个单独的私有作用域 如果想要在一个模块中向外导出一些被别人访问的成员: 通过:module.exports向外导出,没一个模块都有一个对象: module.exports,默认是一个空对象 require 函数的作用:用来加载文件模块 内置模块: 例如 fs / http 第三方: art-template / marked... require 函数的第一个作用 执行被加载模块中的代码 得到被加载模块中导出的接口对象 异步编程思维 清楚理解异步代码的执行过程 能做到封装一个函数（内部由异步操作产生该函数的结果） 所有的异步操作都在普通操作完成之后才会执行 所有函数中通过异步操作得到的结果一定是通过callback回调函数来获取 上层定义 下层调用 模块天生就是一个私有作用域,外部拿不到对于同一个模块,被多次加载,会被缓存起来,以后再加载就直接读取缓存结果 加载过的模块的导出接口会被放到缓存中 模块的加载执行顺序,取决于require函数出现的位置 npm常用命令 npm--help 查看 npm 工具使用帮助 npm--version 查看版本 npm --global npm 升级版本 npm -h需要查看的工具 查看工具的使用帮助 npm uninstall [--save] 卸载当前项目中某个包 安装全局命令行工具 在node 中,还有一种包比较特殊,这种包被称为全局命令行工具,这种不是用在项目中辅助调用的,而是提供一个工具供你在终端使用 npm install --global http-server nrm 多镜像缘切换 安装 npm install --global nrm 自动同步修改代码重启服务器 nodemon第一:安装npm i -g nodemon第二: 使用node app.js 通过 nodemon app.js 设置响应头部123res.writeHead(200,&#123; 'Content-Type': 'text/html; charset=utf-8'&#125;) 文件操作路径 在文件操作中,绝对路径无非就是两种形式: c:/a/b/a.txt 绝对路径 a/b/a.txt 相对路径 相对路径 ./data/a.txt 这里的相对路径表示在哪里执行Node命令,相对路径就相对于谁 __filenmae 和 __dirname + __filenmae永远获取到的都是当前文件的绝对路径 + __dirname永远获取到的都是当前文件所属目录的绝对路径 __dirname + &#39;\\\\data.txt&#39; 在windows上 ,路径分隔是反斜杠: \\ 可以利用path.sep属性获取当前操作系统的路径分隔符 path.join(__dirname,&#39;../a.txt&#39;) 将多个字符串拼接完整的路径 ‘../‘代表进入上一级 path.basename 获取有后缀名的文件 path.dirname 获取第一个路径的目录部分 path.normalize(path) 将一个非标准路径转换成标准路径 path.resolve([...path]) 将一个路径转为动态的绝对路径,但是转出来的绝对路径还是相对于Node执行命令的终端位置 path.parse(&#39;c:\\\\paht\\\\file.txt&#39;) 路径转为对象 对应path.format({}) 在node操作路径的时候,可以使用正斜杠作为路径操作符,因为Node在真正处理文件资源的时候,会自动转换 web路径永远相对于当前页面的url路径 , url只是个标识, 关键在于html页面中的资源引用路径到底相对于什么在 web 中,一切页面中的资源请求路径都相对于当前使用这个页面的 link href img src script src iframe href a href post 请求 node中获取数据 querystring.parse(data) 把查询字符串转换成对象 参数传入: data = ‘name=aa&amp;age=18’ 将表单的enctype 设置为multipart/form-data awesome-名字 git搜索常用的插件"},{"title":"酱油诗","date":"2015-08-16T14:23:12.000Z","path":"2015/08/16/愁诗/","text":"秋风易冷花自堕,孤情独坐楼中默.千万愁思理断肠,独种心中泪满裳.伤的遍体何所为?因你喜新厌旧配!物是人非事事逝,人否物是一一忆.未懂吾心伤几何?怎爱他人共一生! &emsp;&emsp;每行第二个的,算是一首藏头诗吧!"},{"title":"每个人都是一场梦","date":"2015-07-28T09:06:12.000Z","path":"2015/07/28/都是一场梦/","text":"&emsp;&emsp;冷冷的晚风，抚摸着你的脸庞或臂膀，凄清的月光，亲吻你的额头或耳畔，星星眨着眼，用它微弱而坚定的光芒，告诉你，此时的深夜，你在想的，一定是你爱的人。&emsp;&emsp;时光的羽翼已渐渐被叫做岁月的剪刀，削剪了太多太多，而思念的大潮，却永远在涌动，无法覆灭，上帝给了我们渴盼，也给了我们失望，上帝，给了我们夜晚，也给了我们思念。 &emsp;&emsp;你爱的人一定是你心疼的人，而你心疼的人，一定会是你在深夜，还能清晰想清楚她的面旁的人，即使曾经的海誓与山盟，已然云散烟消，可曾经的期盼，却只增不减，在各自疲于奔命的旅途，都忘了太多，丢了太多，因为我们都知道，现在能拥有的都是我们无法舍弃的，偶尔的夜晚，想找个人聊聊天，偶尔的深夜，想拨通一个电话号码，或亲人，或朋友，或伴侣。 &emsp;&emsp;不是所有能到埃菲尔的希望都能成真，不是所有能在富士山下许愿的情侣都会厮守，不是所有能在泰晤士河沐浴的教徒都能圆满，但，所有能在深夜想起的人，都将会是一辈子放不下的依赖。将是深爱的一人。 &emsp;&emsp;夜，为什么可怕，因为你没有依靠，所以觉得可怕，孤孤单单的深夜，模糊的不能再模糊的视线，都让你无所适从，无助，担心，焦虑，全在这一霎那，涌现，可你是否知道，此时的深夜，也有人再想你或许是行走匆匆的过客，或许相熟很久的朋友，可能这就是，明月装饰了你的窗子，而你装饰了别人的梦吧，是啊，我们每个人都可能成为，别人深夜所想起的人，每个人都是别人的一个梦，每个人都是一首诗。"},{"title":"Express的使用","date":"2015-07-22T07:08:32.000Z","path":"2015/07/22/Express/","text":"基础+中间件 数据库 使用node操作数据 Express 一个基于Nodejs快速web开发框架 做网站后台 中间件 express 核心就是面向中间件编程 app.use(function(req,res){//handle})中间件: 任意请求都会进来,不关心请求路径和请求方法 app.use(route,function(req,res){//handle})中间件:只有该请求路径开头的才会进来执行+app.get(‘请求路径’,function(req,res){})只有以get请求 第一个参数:请求路径+app.post(‘请求路径’,function(req,res){})只有以post请求 第一个参数:请求路径 对于同一次请求,流通多个中间件都是同一个req,res对象 12345678app.use(function(req,res,next)&#123; console.log(11) next()&#125;)//调用next()才会执行下一个被匹配的中间件app.use(function(req,res) &#123; console.log(222)&#125;) API1.express express() 得到一个实例app express.static() 方便地托管静态文件唯一中间件 express.Router() 可使用 express.Router 类创建模块化、可挂载的路由句柄 2.Application 12app.get() app.post() 设置路由 通过 app 调用对应的 get 或 post 方法 根据不同的请求方法 + 请求路径，转发到具体的处理函数 这里的路由中的第一个参数需要传入一个字符换：请求路径（pathname，不包含查询字符串） 请求处理函数需要接收两个参数：req 和 res req：请求对象 可以通过请求对象获取一些客户端的请求数据，例如请求 URL、请求方法、请求查询字符串 等数据 req 也是在原来的基础之上，扩展添加了一些有用的方法或属性 例如：req.query res：响应对象 可以给客户端发送响应数据 Express 在基于原来的 res 基础之又提供了一些快捷便利的方法 例如：res.redirect() app.listen() 监听 端口,启动服务器 12345678app.use(function (req, res) &#123; // handle &#125;)//中间件：任何请求都会进来，不关心请求路径和请求方法app.use(&apos;请求路径&apos;, function (req, res) &#123; // handle &#125;) //中间件：只有该请求路径开头的才会进来执行app.get(&apos;请求路径&apos;, function (req, res) &#123; // handle &#125;) //只有以 get 请求 第一个参数：请求路径的时候才会进来app.post(&apos;请求路径&apos;, function (req, res) &#123; // handle &#125;)//只有以 post 请求 第一个参数：请求路径的时候才会进来 3.Request req.url 获取请求路径 req.method 获取请求方法 req.headers 获取请求头 req.hostname 获取请求主机名 req.ip 获取Ip req.query 获取请求字符串 req.body 获取主体 req.params req.cookie req.path req.baseUrl req.originalUrl MongoDB64 位版本启动 MongoDB 数据服务： 12mongod --dbpath=C:\\data\\dbmongod --dbpath C:\\data\\db 32 位版本使用下面的命令启动数据服务： 1mongod --dbpath 数据存储路径 --journal --storageEngine=mmapv1 提示：如果不加 --dbpath, mongod 会自动使用 执行命令所属磁盘根目录/data/db 目录作为自己的数据存储路径，所以，如果当前磁盘已经有了 磁盘根路径\\data\\db 目录了，可以省略 --dbpath。 执行完上面的命令并成功开启 MongoDB 数据服务实例之后，就把该控制台最小化到一边就可以了，千万不要关闭，否则关闭终端就是关闭数据库了，如果对数据库的操作结束，可以打开该控制台通过 Ctrl + C 关闭或者直接关闭终端。 基本操作命令 show dbs 查看当前服务实例上所有的数据库 use 数据库名称 这个命令表示切换到指定的数据库 如果没有，也不会创建 如果已经有了，则表示切换到这个数据库对该数据库进行操作 连接到数据库之后，默认有一个变量叫做：db，终端默认把 db 赋值给了 test db 查看当前所处的数据库 db.集合名称.insert(数据文档) show collections 查看当前数据库中所有的集合 db.集合名称.find() 查询指定集合中所有的数据 可以通过 db.集合名称.find().pretty() 美化输出格式 默认是查询所有，可以通过：db.集合名称.find({查询条件}) 按条件查询集合中的数据 db.集合名称.update({更新条件}, {要更新的字段}) 更新指定集合数据 db.集合名称.remove({删除条件}) 删除指定集合中的数据"}]