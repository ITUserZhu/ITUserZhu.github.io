[{"title":"每个人都是一场梦","date":"2015-07-28T09:06:12.000Z","path":"2015/07/28/都是一场梦/","text":"&emsp;&emsp;冷冷的晚风，抚摸着你的脸庞或臂膀，凄清的月光，亲吻你的额头或耳畔，星星眨着眼，用它微弱而坚定的光芒，告诉你，此时的深夜，你在想的，一定是你爱的人。&emsp;&emsp;时光的羽翼已渐渐被叫做岁月的剪刀，削剪了太多太多，而思念的大潮，却永远在涌动，无法覆灭，上帝给了我们渴盼，也给了我们失望，上帝，给了我们夜晚，也给了我们思念。 &emsp;&emsp;你爱的人一定是你心疼的人，而你心疼的人，一定会是你在深夜，还能清晰想清楚她的面旁的人，即使曾经的海誓与山盟，已然云散烟消，可曾经的期盼，却只增不减，在各自疲于奔命的旅途，都忘了太多，丢了太多，因为我们都知道，现在能拥有的都是我们无法舍弃的，偶尔的夜晚，想找个人聊聊天，偶尔的深夜，想拨通一个电话号码，或亲人，或朋友，或伴侣。 &emsp;&emsp;不是所有能到埃菲尔的希望都能成真，不是所有能在富士山下许愿的情侣都会厮守，不是所有能在泰晤士河沐浴的教徒都能圆满，但，所有能在深夜想起的人，都将会是一辈子放不下的依赖。将是深爱的一人。 &emsp;&emsp;夜，为什么可怕，因为你没有依靠，所以觉得可怕，孤孤单单的深夜，模糊的不能再模糊的视线，都让你无所适从，无助，担心，焦虑，全在这一霎那，涌现，可你是否知道，此时的深夜，也有人再想你或许是行走匆匆的过客，或许相熟很久的朋友，可能这就是，明月装饰了你的窗子，而你装饰了别人的梦吧，是啊，我们每个人都可能成为，别人深夜所想起的人，每个人都是别人的一个梦，每个人都是一首诗。"},{"title":"Express的使用","date":"2015-07-22T07:08:32.000Z","path":"2015/07/22/Express/","text":"基础+中间件 数据库 使用node操作数据 Express 一个基于Nodejs快速web开发框架 做网站后台 中间件 express 核心就是面向中间件编程 app.use(function(req,res){//handle})中间件: 任意请求都会进来,不关心请求路径和请求方法 app.use(route,function(req,res){//handle})中间件:只有该请求路径开头的才会进来执行+app.get(‘请求路径’,function(req,res){})只有以get请求 第一个参数:请求路径+app.post(‘请求路径’,function(req,res){})只有以post请求 第一个参数:请求路径 对于同一次请求,流通多个中间件都是同一个req,res对象 12345678app.use(function(req,res,next)&#123; console.log(11) next()&#125;)//调用next()才会执行下一个被匹配的中间件app.use(function(req,res) &#123; console.log(222)&#125;) API1.express express() 得到一个实例app express.static() 方便地托管静态文件唯一中间件 express.Router() 可使用 express.Router 类创建模块化、可挂载的路由句柄 2.Application 12app.get() app.post() 设置路由 通过 app 调用对应的 get 或 post 方法 根据不同的请求方法 + 请求路径，转发到具体的处理函数 这里的路由中的第一个参数需要传入一个字符换：请求路径（pathname，不包含查询字符串） 请求处理函数需要接收两个参数：req 和 res req：请求对象 可以通过请求对象获取一些客户端的请求数据，例如请求 URL、请求方法、请求查询字符串 等数据 req 也是在原来的基础之上，扩展添加了一些有用的方法或属性 例如：req.query res：响应对象 可以给客户端发送响应数据 Express 在基于原来的 res 基础之又提供了一些快捷便利的方法 例如：res.redirect() app.listen() 监听 端口,启动服务器 12345678app.use(function (req, res) &#123; // handle &#125;)//中间件：任何请求都会进来，不关心请求路径和请求方法app.use(&apos;请求路径&apos;, function (req, res) &#123; // handle &#125;) //中间件：只有该请求路径开头的才会进来执行app.get(&apos;请求路径&apos;, function (req, res) &#123; // handle &#125;) //只有以 get 请求 第一个参数：请求路径的时候才会进来app.post(&apos;请求路径&apos;, function (req, res) &#123; // handle &#125;)//只有以 post 请求 第一个参数：请求路径的时候才会进来 3.Request req.url 获取请求路径 req.method 获取请求方法 req.headers 获取请求头 req.hostname 获取请求主机名 req.ip 获取Ip req.query 获取请求字符串 req.body 获取主体 req.params req.cookie req.path req.baseUrl req.originalUrl MongoDB64 位版本启动 MongoDB 数据服务： 12mongod --dbpath=C:\\data\\dbmongod --dbpath C:\\data\\db 32 位版本使用下面的命令启动数据服务： 1mongod --dbpath 数据存储路径 --journal --storageEngine=mmapv1 提示：如果不加 --dbpath, mongod 会自动使用 执行命令所属磁盘根目录/data/db 目录作为自己的数据存储路径，所以，如果当前磁盘已经有了 磁盘根路径\\data\\db 目录了，可以省略 --dbpath。 执行完上面的命令并成功开启 MongoDB 数据服务实例之后，就把该控制台最小化到一边就可以了，千万不要关闭，否则关闭终端就是关闭数据库了，如果对数据库的操作结束，可以打开该控制台通过 Ctrl + C 关闭或者直接关闭终端。 基本操作命令 show dbs 查看当前服务实例上所有的数据库 use 数据库名称 这个命令表示切换到指定的数据库 如果没有，也不会创建 如果已经有了，则表示切换到这个数据库对该数据库进行操作 连接到数据库之后，默认有一个变量叫做：db，终端默认把 db 赋值给了 test db 查看当前所处的数据库 db.集合名称.insert(数据文档) show collections 查看当前数据库中所有的集合 db.集合名称.find() 查询指定集合中所有的数据 可以通过 db.集合名称.find().pretty() 美化输出格式 默认是查询所有，可以通过：db.集合名称.find({查询条件}) 按条件查询集合中的数据 db.集合名称.update({更新条件}, {要更新的字段}) 更新指定集合数据 db.集合名称.remove({删除条件}) 删除指定集合中的数据"}]